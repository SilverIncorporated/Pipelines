name: CI

on:
  workflow_call:
    inputs: 
      packageName:
        required: true
    secrets:
      UIPATH_AUTHENTICATION_URL:
        required: true
      UIPATH_LIBRARY_URL:
        required: true
      UIPATH_CLIENT_ID:
        required: true
      UIPATH_CLIENT_SECRET:
        required: true
      UIPATH_SCOPES:
        required: true
      GHPACKAGESURL:
        required: true

permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest    
    outputs: 
      version: ${{ steps.v.outputs.version }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 #fetch-depth is needed for Semantic Version
        
    #Install and calculate the new version with GitVersion  
    - name: Determine Version Number
      id: v
      uses: paulhatch/semantic-version@v5.0.3
      with: 
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'

        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: true
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: true
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "csv"
    - name: Display new version
      run: |
        echo "Version: ${{ steps.v.outputs.version }}"

    #Build/pack the project
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x.x

    - name: Authenticate to GH Packages
      run: dotnet nuget add source --username ${{ secrets.GH_USERNAME }} --password ${{ secrets.GH_PAT }} --store-password-in-clear-text --name github "${{ secrets.GHPACKAGESURL }}"

    - name: Restore
      run: dotnet restore

    - name: Build and Pack NuGet package
      run: dotnet pack -p:Version='${{ steps.v.outputs.version }}' -c Release

    - name: Upload NuGet package to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: nugetPackage
        path: ./bin/Release/ 
        
  release:
    runs-on: ubuntu-latest    
    needs: build
    permissions: 
      packages: write
    
    steps:  
    #Push NuGet package to GitHub packages
    - name: Download nuget package artifact
      uses: actions/download-artifact@v3
      with:
        name: nugetPackage
        path: ./package

    - name: Setup .NET Core @ Latest
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x.x
        source-url: ${{ secrets.GHPACKAGESURL }}
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}   
        
    - name: Push package to GitHub packages 
      run: dotnet nuget push ./package/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate     

  deploy:
    runs-on: ubuntu-latest 
    needs: build

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 #fetch-depth is needed for Semantic Version

    - name: Download nuget package artifact
      uses: actions/download-artifact@v3
      with:
        name: nugetPackage
        path: ./package

    - name: Authenticate to UiPath Tenant
      id: authReq
      uses: fjogeleit/http-request-action@v1
      with:
        url: ${{ secrets.UIPATH_AUTHENTICATION_URL }}
        method: 'POST'
        contentType: 'application/x-www-form-urlencoded'
        data: '{
                  "grant_type": "client_credentials",
                  "client_id": "${{ secrets.UIPATH_CLIENT_ID }}",
                  "client_secret": "${{ secrets.UIPATH_CLIENT_SECRET }}",
                  "scope": "${{ secrets.UIPATH_SCOPES }}"
              }'

    # - name: Display Response
    #   run: |
    #     echo ${{ steps.authReq.outputs.response }}

    - name: Fetch action
        id: pl
        uses: Rishabh510/Path-lister-action@master
        with:
          path: "./package"
          type: ".nupkg"

    - name: List Files
      run: |
        echo "Found ${{ steps.pl.outputs.path_count }} file(s) with this extension:"
        for i in ${{ steps.pl.outputs.paths }}; do
        echo $i
        done


    - name: Post Library Package to Tenant
      uses: fjogeleit/http-request-action@v1
      with:
          url: '${{ secrets.UIPATH_LIBRARY_URL }}'
          bearerToken: fromJson( ${{ steps.authReq.outputs.response }} ).access_token
          method: 'POST'
          files: '{"file": "./package/${{ github.event.repository.name }}.${{ needs.build.outputs.version }}.nupkg"}'