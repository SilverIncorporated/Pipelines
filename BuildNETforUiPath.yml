# This workflow will build a .NET project and upload the built project to a UiPath Tenant

name: .NET 6

on:
  workflow_call:
      secrets:
        UIPATH_CLIENTID:
          required: true
        UIPATH_SECRET:
          required: true
        UIPATH_SCOPE:
          required: true
        UIPATH_AUTHURL:
          required: true
        UIPATH_ORCHURL:
          required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Setup the .NET Instance
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore All dependencies
      run: dotnet restore
    - name: Build Package
      run: dotnet build -c Release --no-restore
    - name: Test Package
      run: dotnet test --no-build --verbosity normal
    - name: Determine Version Number
      id: v
      uses: paulhatch/semantic-version@v5.0.0-alpha2
      with: 
        branch: "main"
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'

        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: true
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "csv"
    - name: Pack With Nuget
      run: dotnet pack --no-build -o "Build" -c Release -p:Version=${{ steps.v.outputs.version }}
    - name: Authenticate with UiPath Orchestrator
      id: authRequest
      uses: fjogeleit/http-request-action@v1
      with:
        url: ${{ secrets.UIPATH_AUTHURL }}
        method: 'Post'
        customHeaders: '{"Content-Type": "application/x-www-form-urlencoded"}'
        data: 'grant_type=client_credentials&client_id=${{ secrets.UIPATH_CLIENTID }}&client_secret=${{ secrets.UIPATH_SECRET}}&scope=${{ secrets.UIPATH_SCOPE }}'
    - name: Deploy to Orchestrator
      uses: fjogeleit/http-request-action@v1
      with:
        url: ${{ format( '{0}/{1}', secrets.UIPATH_ORCHURL, env.ENDPOINT) }}
        method: 'Post'
        bearerToken: ${{ fromJson(steps.authRequest.outputs.response).access_token }}
        files: '{ "file": "${{ github.workspace }}/Build/${{ github.event.repository.name }}.${{ steps.v.outputs.version }}.nupkg" }'
      env: 
        ENDPOINT: /odata/Libraries/UiPath.Server.Configuration.OData.UploadPackage


